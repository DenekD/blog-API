{"version":3,"sources":["components/Header.js","components/Navbar.js","components/Article.js","components/ArticlesList.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","Navbar","type","Article","className","href","authorUrl","src","authorAvatar","alt","title","data","articleUrl","articleImg","dangerouslySetInnerHTML","__html","description","target","rel","ArticlesList","posts","map","post","author","avatar_URL","date","substring","featured_image","content","URL","profile_URL","App","state","queryNumber","loaded","performSearch","query","axios","get","then","response","setState","catch","error","console","log","this","class","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yQAaeA,MAXf,SAAgBC,GACd,OAEI,yCCOSC,MAVf,SAAgBD,GACd,OACE,6BACE,4BAAQE,KAAK,UAAb,WCuCSC,MAzCf,SAAiBH,GACf,OACE,yBAAKI,UAAU,WACf,uBAAGC,KAAML,EAAMM,WACb,yBAAKF,UAAU,mBACb,yBAAKA,UAAU,uBAAuBG,IAAKP,EAAMQ,aAAcC,IAAI,WACnE,uBAAGL,UAAU,0BAA0BJ,EAAMU,OAC7C,uBAAGN,UAAU,yBAAyBJ,EAAMW,QAI9C,uBAAGN,KAAML,EAAMY,YACb,yBAAKR,UAAU,kCACf,yBAAKG,IAAKP,EAAMa,WAAYJ,IAAI,aAElC,yBAAKL,UAAU,uBAAuBU,wBAAyB,CAAEC,OAAQf,EAAMgB,gBAI/E,4BAAQZ,UAAU,gBAChB,uBAAGa,OAAO,SAASC,IAAI,sBAAsBb,KAAML,EAAMY,YACvD,iDAGJ,4BAAQR,UAAU,gBAChB,uBAAGa,OAAO,SAASC,IAAI,sBAAsBb,KAAML,EAAMM,WAAzD,mBCEOa,MAzBf,SAAsBnB,GACpB,OACE,yBAAKI,UAAU,QAEZJ,EAAMoB,MAAMC,KAAI,SAAAC,GAAI,OACnB,kBAAC,EAAD,CACEd,aAAcc,EAAKC,OAAOC,WAC1Bd,MAAOY,EAAKZ,MACZC,KAAMW,EAAKG,KAAKC,UAAU,EAAG,IAC7Bb,WAAYS,EAAKK,eACjBX,YAAaM,EAAKM,QAAQF,UAAU,EAAG,KACvCd,WAAYU,EAAKO,IACjBvB,UAAWgB,EAAKC,OAAOO,mBCyClBC,EA9Cf,4MAEEC,MAAQ,CACNZ,MAAO,GACPa,YAAa,EACbC,QAAQ,GALZ,EAYEC,cAAgB,SAACC,GACfC,IAAMC,IAAN,mJAAsJF,IACnJG,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZrB,MAAOoB,EAAS7B,KAAKS,MACrBa,YAAaG,EAAQ,EACrBF,QAAQ,OAGXQ,OAAM,SAAAC,GACLC,QAAQC,IAAI,kCAAmCF,OAtBvD,kEASIG,KAAKX,cAAcW,KAAKd,MAAMC,eATlC,+BA0BY,IAAD,OACP,OACE,yBAAK7B,UAAU,gBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACC0C,KAAKd,MAAME,OAAS,kBAAC,EAAD,CAAcd,MAAO0B,KAAKd,MAAMZ,QAAY,uBAAG2B,MAAM,mBAE1E,4BAAQC,QAAS,WACd,EAAKb,cAAc,EAAKH,MAAMC,aAC9B,EAAKQ,SAAS,CACZP,QAAQ,KAGb9B,UAAU,6BANV,wBAjCR,GAAyB6C,aCALC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMqB,c","file":"static/js/main.d73e3e3c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header(props) {\r\n  return (\r\n\r\n      <header>\r\n        Blog\r\n      </header>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default Header\r\n\r\n\r\n","import React from 'react'\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav>\r\n      <button type=\"button\" >Posts</button>\r\n    </nav>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Navbar\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Article(props) {\r\n  return (\r\n    <div className=\"article\">\r\n    <a href={props.authorUrl}>\r\n      <div className=\"article__author\">\r\n        <img className=\"article__author__img\" src={props.authorAvatar} alt=\"author\" />\r\n        <p className=\"article__author__title\">{props.title}</p>\r\n        <p className=\"article__author__data\">{props.data}</p>\r\n      </div>\r\n    </a>\r\n\r\n      <a href={props.articleUrl}>\r\n        <div className=\"article__content__imgContainer\" >\r\n        <img src={props.articleImg} alt=\"article\" />\r\n      </div>\r\n      <div className=\"article__description\" dangerouslySetInnerHTML={{ __html: props.description }} />\r\n      </a>\r\n\r\n\r\n      <button className=\"article__btn\">\r\n        <a target='_blank' rel=\"noopener noreferrer\" href={props.articleUrl}>\r\n          <span>go to article</span>\r\n        </a>\r\n      </button>\r\n      <button className=\"article__btn\">\r\n        <a target='_blank' rel=\"noopener noreferrer\" href={props.authorUrl}>about author</a>\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nArticle.propTypes = {\r\n  authorAvatar: PropTypes.string,\r\n  title: PropTypes.string,\r\n  data: PropTypes.string,\r\n  articleImg: PropTypes.string,\r\n  description: PropTypes.string,\r\n  articleUrl: PropTypes.string,\r\n  authorUrl: PropTypes.string\r\n}\r\n\r\nexport default Article\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Article from './Article'\r\n\r\nfunction ArticlesList(props) {\r\n  return (\r\n    <div className=\"list\">\r\n\r\n      {props.posts.map(post => (\r\n        <Article\r\n          authorAvatar={post.author.avatar_URL}\r\n          title={post.title}\r\n          data={post.date.substring(0, 10)}\r\n          articleImg={post.featured_image}\r\n          description={post.content.substring(0, 250)}\r\n          articleUrl={post.URL}\r\n          authorUrl={post.author.profile_URL}\r\n        />\r\n      )\r\n      )\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nArticlesList.propTypes = {\r\n  posts: PropTypes.array\r\n}\r\n\r\nexport default ArticlesList\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\nimport axios from 'axios';\nimport {\n  HashRouter,\n  Route,\n  Switch\n} from 'react-router-dom';\n\nimport Header from './components/Header';\nimport Navbar from './components/Navbar';\nimport ArticlesList from './components/ArticlesList';\n\nexport class App extends Component {\n\n  state = {\n    posts: [],\n    queryNumber: 6,\n    loaded: false\n  }\n\n  componentDidMount() {\n    this.performSearch(this.state.queryNumber)\n  }\n\n  performSearch = (query) => {\n    axios.get(`https://public-api.wordpress.com/rest/v1.1/sites/en.blog.wordpress.com/posts/?fields=author,title,date,featured_image,content,URL&number=${query}`)\n      .then(response => {\n        this.setState({\n          posts: response.data.posts,\n          queryNumber: query + 6,\n          loaded: true\n        });\n      })\n      .catch(error => {\n        console.log('Error fetching and parsing data', error);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"main-content\">\n        <Header />\n        <Navbar />\n        {this.state.loaded ? <ArticlesList posts={this.state.posts} /> : <i class=\"fas fa-spinner\"></i> }\n\n        <button onClick={() =>{\n           this.performSearch(this.state.queryNumber)\n           this.setState({\n             loaded: false\n           })\n        }}\n        className=\"btn-loadMore article__btn\">load more posts</button>\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}